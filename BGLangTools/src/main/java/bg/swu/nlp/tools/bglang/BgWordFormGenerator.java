/*
 *   BGLangTools - language tools for processing Bulgarian text
 *
 *   Copyright (C) 2014-2024 Grigor Iliev <grigor.iliev@swu.bg>
 *
 *   This file is part of BGLangTools.
 *
 *   BGLangTools is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License version 3
 *   as published by the Free Software Foundation.
 *
 *   BGLangTools is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with BGLangTools; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *   MA  02111-1307  USA
 */

package bg.swu.nlp.tools.bglang;

import eu.ideya.lingua.bg.*;

import static eu.ideya.lingua.bg.BTBUtils.getGrammLabelUid;

import static bg.swu.nlp.tools.bglang.I18n.i18n;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.util.ArrayList;


/**
 *
 */
public class BgWordFormGenerator {
	private final static BgWordFormGenerator bgWordformGenerator = new BgWordFormGenerator();
	
	private BgWordFormGenerator() { }
	
	public static BgWordFormGenerator getInstance() {
		return bgWordformGenerator;
	}
	
	/**
	 * The BGLangTools library contains a resource file with
	 * complete list of all pronouns with all inflected forms. Use this
	 * method to load the resource file in the specified dictionary.
	 */
	public static void loadBuiltinPronouns(BgDictionary dict) throws Exception {
		InputStream stream = BGLangTools.class.getResourceAsStream("res/pronouns.dat");
		BTBUtils.loadGrammarTypeResource(stream, dict);
	}
	
	/**
	 * The BGLangTools library contains a resource file with the complete list
	 * of verbs (with all inflected forms) for grammatical types 142 and 143.
	 * Use this method to load the resource file in the specified dictionary.
	 */
	public static void loadBuiltinTypes142_143(BgDictionary dict) throws Exception {
		InputStream stream = BGLangTools.class.getResourceAsStream("res/verbs.dat");
		BTBUtils.loadGrammarTypeResource(stream, dict);
	}
	
	/**
	 * Don't use this method for lemmas, which are already in a dictionary,
	 * a new ID for this lemma is generated by this method.
	 * @param lemma
	 * @param type
	 * @return 
	 */
	public WordEntry[] generateWordForms(String lemma, String type) {
		int uid = GrammaticalLabel.getUidByGrammarType(type);
		return generateWordForms(new WordEntry(lemma, -1, uid));
	}
	
	/**
	 * Note that this method returns <code>null</code> for all pronouns
	 * (types form 90 to 130 inclusive) and for types 142 and 143 use
	 * {@link #loadBuiltinPronouns(BgDictionary) } and
	 * {@link #loadBuiltinTypes142_143(BgDictionary) }
	 * instead.
	 */
	public WordEntry[] generateWordForms(WordEntry lemma) {
		if(lemma == null) return null;
		
		int code = BgGrammarType.getCodeById(lemma.grammLabelUid);
		char suffix = BgGrammarType.getSuffixById(lemma.grammLabelUid);
		
		if(code >= 90  && code <= 130) return null;
		if(code >= 142 && code <= 143) return null;
		
		if(code >= 188 && code <= 208) return null;
		
		//if(code != 37) return null;
		String s = "generateWordFormsType" + BgGrammarType.getTypeById(lemma.grammLabelUid);
		
		try { 
			Method m = BgWordFormGenerator.class.getMethod(s, WordEntry.class);
			return (WordEntry[]) m.invoke(this, lemma);
		} catch(Exception e) {
			System.err.println("method name: " + s);
			e.printStackTrace();
		}
		
		return null;
	}
	
	/**
	 * Generates all word forms of the specified lemma.
	 * @param reverseIdx The reverse position of <code>substr</code> in the word.
	 * 0 means the end of the string, 1 means the position of the last character, etc.
	 * @param substr The substring to be replaced with <code>newSubstr</code>.
	 * If the substring word 
	 * @param newSubstr The substring to replace <code>substr</code>.
	 * @return The transformed string.
	 * @throws IllegalArgumentException if word mismatch occur.
	 */
	public WordEntry[] generateWordFormsTypeClassA (
		WordEntry lemma, int reverseIdx, String substr, String newSubstr
	) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, reverseIdx, substr, newSubstr, "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + ove, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ovete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType1(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + ove, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + ovete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType2(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 2, "я", "е", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(mod + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + ove, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ovete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s   + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType2a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 2, "я", "е", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + ove, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ovete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s   + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType3(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 3, "ръ", "ър", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(mod + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + ove, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ovete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(mod + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType4(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 4, "ятър", "етр", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + ove, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ovete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s   + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType5(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[7];
		entries[0] = new WordEntry(s + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + ove, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + i, lemma.id, encodePluralIndefinite(uid));
		entries[4] = new WordEntry(s + ovete, lemma.id, encodePluralDefinite(uid));
		entries[5] = new WordEntry(s + ite, lemma.id, encodePluralDefinite(uid));
		entries[6] = new WordEntry(s + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType6(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[9];
		entries[0] = new WordEntry(s + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + a_, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + i, lemma.id, encodePluralIndefinite(uid));
		entries[4] = new WordEntry(s + ya, lemma.id, encodePluralIndefinite(uid));
		entries[5] = new WordEntry(s + ata, lemma.id, encodePluralDefinite(uid));
		entries[6] = new WordEntry(s + ite, lemma.id, encodePluralDefinite(uid));
		entries[7] = new WordEntry(s + yata, lemma.id, encodePluralDefinite(uid));
		entries[8] = new WordEntry(s + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType7(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[6];
		entries[0] = new WordEntry(s + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + i, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + ite, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s + a_, lemma.id, encodeCountForm(uid));
		entries[5] = new WordEntry(s + e, lemma.id, encodeSingularVocative(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType7a(WordEntry lemma) {
		return generateWordFormsType7(lemma);
	}
	
	public WordEntry[] generateWordFormsType7b(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[6];
		entries[0] = new WordEntry(s + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + i, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + ite, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s + a_, lemma.id, encodeCountForm(uid));
		entries[5] = new WordEntry(s + o, lemma.id, encodeSingularVocative(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType8(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 2, "е", "", a_, null);
	}
	
	public WordEntry[] generateWordFormsType8a(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 2, "е", "", null, o);
	}
	
	public WordEntry[] generateWordFormsType9(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 2, "ъ", "", a_, null);
	}
	
	public WordEntry[] generateWordFormsType9a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 2, "ъ", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + ove, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ovete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s   + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType10(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 2, "ъ", "", a_, null);
	}
	
	public WordEntry[] generateWordFormsType11(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 2, "ъ", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(mod + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + i, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ite, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s   + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType12(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 3, "ръ", "ър", "", "");
		String mod2 = transform(lemma.word, 3, "рък", "ърц", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(mod  + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod  + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod2 + i, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod2 + ite, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(mod  + o, lemma.id, encodeSingularVocative(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType13(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 2, "е", "й", null, o);
	}
	
	public WordEntry[] generateWordFormsType14(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 1, "к", "ц", a_, null);
	}
	
	public WordEntry[] generateWordFormsType14a(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 1, "к", "ц", a_, o);
	}
	
	public WordEntry[] generateWordFormsType15(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 1, "г", "з", a_, null);
	}
	
	public WordEntry[] generateWordFormsType16(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 1, "х", "с", a_, null);
	}
	
	public WordEntry[] generateWordFormsType17(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 1, "к", "н", a_, null);
	}
	
	public WordEntry[] generateWordFormsType18(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 2, "ин", "", null, o);
	}
	
	public WordEntry[] generateWordFormsType18a(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 2, "ик", "", null, null);
	}
	
	public WordEntry[] generateWordFormsType19(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 2, "ък", "ц", null, o);
	}
	
	public WordEntry[] generateWordFormsType19a(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 2, "ек", "йц", a_, null);
	}
	
	public WordEntry[] generateWordFormsType20(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 3, "", "ъ", "ец", "ц");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + i, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ite, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s   + o, lemma.id, encodeSingularVocative(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType21(WordEntry lemma) {
		return generateWordFormsClassB(lemma, 3, "чин", "ц", null, o);
	}
	
	public WordEntry[] generateWordFormsType22(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + a_, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + ata, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType23(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 2, "ин", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + a_, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ata, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s   + e, lemma.id, encodeSingularVocative(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType24(WordEntry lemma) {
		return generateWordFormsClassC(lemma, 0, "", "", null, o);
	}
	
	public WordEntry[] generateWordFormsType24a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "з", "ж", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s   + e, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s   + ete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(mod + e, lemma.id, encodeSingularVocative(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType25(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + ya, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + yata, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s + e, lemma.id, encodeSingularVocative(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType26(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + ilishta, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + ilishtata, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType27(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 2, "ец", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + yt, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + ovce, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ovcete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s   + a_, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType28(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "й", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(mod + ya, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + yat, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + eve, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + evete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(mod + ya, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType28a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "й", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(mod + ya, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + yat, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s   + ove, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s   + ovete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(mod + ya, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType29(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[6];
		entries[0] = new WordEntry(s + ya, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yat, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + yove, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + yovete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s + ko, lemma.id, encodeSingularVocative(uid));
		entries[5] = new WordEntry(s + yo, lemma.id, encodeSingularVocative(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType30(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 2, "ъ", "", "", "");
		WordEntry[] entries = new WordEntry[6];
		entries[0] = new WordEntry(s   + ya, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + yat, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + yove, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + yovete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s   + ya, lemma.id, encodeCountForm(uid));
		entries[5] = new WordEntry(mod + yo, lemma.id, encodeSingularVocative(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType31(WordEntry lemma) {
		return generateWordFormsClassD(lemma, 0, "", "", ya, null);
	}
	
	public WordEntry[] generateWordFormsType31a(WordEntry lemma) {
		return generateWordFormsClassD(lemma, 0, "", "", null, yu);
	}
	
	public WordEntry[] generateWordFormsType32(WordEntry lemma) {
		return generateWordFormsClassD(lemma, 1, "й", "", ya, null);
	}
	
	public WordEntry[] generateWordFormsType32a(WordEntry lemma) {
		return generateWordFormsClassD(lemma, 1, "й", "", null, yu);
	}
	
	public WordEntry[] generateWordFormsType33(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 2, "е", "", "", "");
		WordEntry[] entries = new WordEntry[6];
		entries[0] = new WordEntry(s   + ya, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + yat, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + i, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ite, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s   + a_, lemma.id, encodeCountForm(uid));
		entries[5] = new WordEntry(mod + i, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType34(WordEntry lemma) {
		return generateWordFormsClassE(lemma, 2, "ъ", "", ya, null);
	}
	
	public WordEntry[] generateWordFormsType35(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s + ya, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yat, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + e, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + ete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s + ya, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType35a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[6];
		entries[0] = new WordEntry(s + ya, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yat, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + e, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + ete, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s + ya, lemma.id, encodeCountForm(uid));
		entries[5] = new WordEntry(s + yu, lemma.id, encodeSingularVocative(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType36(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "й", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(mod + ya, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + yat, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + ishta, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ishtata, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(mod + ya, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType37(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s + ya, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yat, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(s + ishta, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(s + ishtata, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s + ya, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType38(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "а", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + ta, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + ta, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + i, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ite, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s, lemma.id, encodeCountForm(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType39(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "я", "", "", "");
		WordEntry[] entries = new WordEntry[4];
		entries[0] = new WordEntry(s   + ta, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + ta, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + i, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ite, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType40(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "о", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s   + to, lemma.id, encodeSingularDefiniteFull(uid));
		entries[2] = new WordEntry(mod + ovci, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ovcite, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(s, lemma.id, encodeSingularVocative(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType40a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[2];
		entries[0] = new WordEntry(s + a_, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + yt, lemma.id, encodeSingularDefiniteFull(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType41(WordEntry lemma) {
		return generateWordFormsClassF(lemma, 1, "а", "", null, null);
	}
	
	public WordEntry[] generateWordFormsType41a(WordEntry lemma) {
		return generateWordFormsClassF(lemma, 1, "а", "", null, o);
	}
	
	public WordEntry[] generateWordFormsType41b(WordEntry lemma) {
		return generateWordFormsClassF(lemma, 1, "а", "", null, e);
	}
	
	public WordEntry[] generateWordFormsType42(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[3];
		entries[0] = new WordEntry(s + ta, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(s + ta, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType42a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[1];
		entries[0] = new WordEntry(s + ta, lemma.id, encodeSingularDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType43(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 3, "я", "е", "а", "");
		WordEntry[] entries = new WordEntry[3];
		entries[0] = new WordEntry(s   + ta, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + i, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(mod + ite, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType43a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 4, "я", "е", "а", "");
		WordEntry[] entries = new WordEntry[3];
		entries[0] = new WordEntry(s   + ta, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + i, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(mod + ite, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType44(WordEntry lemma) {
		return generateWordFormsClassG(lemma, 1, "а", "", null, o);
	}
	
	public WordEntry[] generateWordFormsType45(WordEntry lemma) {
		return generateWordFormsClassG(lemma, 2, "ка", "ц", null, null);
	}
	
	public WordEntry[] generateWordFormsType46(WordEntry lemma) {
		return generateWordFormsClassG(lemma, 2, "га", "з", null, null);
	}
	
	public WordEntry[] generateWordFormsType47(WordEntry lemma) {
		return generateWordFormsClassF(lemma, 1, "я", "", null, null); // TODO: fix vocative
	}
	
	public WordEntry[] generateWordFormsType48(WordEntry lemma) {
		return generateWordFormsClassG(lemma, 1, "я", "", null, "ьо");
	}
	
	public WordEntry[] generateWordFormsType49(WordEntry lemma) {
		return generateWordFormsClassF(lemma, 0, "", "", null, null);
	}
	
	public WordEntry[] generateWordFormsType50(WordEntry lemma) {
		return generateWordFormsClassF(lemma, 2, "е", "", null, null);
	}
	
	public WordEntry[] generateWordFormsType51(WordEntry lemma) {
		return generateWordFormsClassF(lemma, 2, "ъ", "", null, null);
	}
	
	public WordEntry[] generateWordFormsType52(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 5, "я", "е", "", "");
		WordEntry[] entries = new WordEntry[3];
		entries[0] = new WordEntry(mod   + ta, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + i, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(s + ite, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType52a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 6, "я", "е", "", "");
		WordEntry[] entries = new WordEntry[3];
		entries[0] = new WordEntry(mod   + ta, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + i, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(s + ite, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType53(WordEntry lemma) {
		return generateWordFormsClassF(lemma, 3, "ръ", "ър", null, null);
	}
	
	public WordEntry[] generateWordFormsType54(WordEntry lemma) {
		return generateWordFormsClassH(lemma, 1, "о", "", null, null);
	}
	
	public WordEntry[] generateWordFormsType55(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "о", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + a_, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(mod + eta, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ata, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(mod + etata, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType56(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "о", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + a_, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(mod + e, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ata, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(mod + ete, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType57(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 3, "я", "е", "о", "");
		WordEntry[] entries = new WordEntry[3];
		entries[0] = new WordEntry(s   + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + a_, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(mod + ata, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType57a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 4, "я", "е", "о", "");
		WordEntry[] entries = new WordEntry[3];
		entries[0] = new WordEntry(s   + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + a_, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(mod + ata, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType58(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 3, "я", "е", "о", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + a_, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(mod + e, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ata, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(mod + ete, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType59(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "о", "", "", "");
		WordEntry[] entries = new WordEntry[3];
		entries[0] = new WordEntry(s   + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + ene, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(mod + enete, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType60(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "о", "", "", "");
		WordEntry[] entries = new WordEntry[3];
		entries[0] = new WordEntry(s   + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + esa, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(mod + esata, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType61(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "о", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + a_, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(mod + eta, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + ata, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(mod + etata, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType62(WordEntry lemma) {
		return generateWordFormsClassI(lemma, 1, "о", "", null, null);
	}
	
	public WordEntry[] generateWordFormsType63(WordEntry lemma) {
		return generateWordFormsClassI(lemma, 2, "ко", "ч", null, null);
	}
	
	public WordEntry[] generateWordFormsType64(WordEntry lemma) {
		return generateWordFormsClassI(lemma, 2, "хо", "ш", null, null);
	}
	
	public WordEntry[] generateWordFormsType65(WordEntry lemma) { // also type 73
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[3];
		entries[0] = new WordEntry(s + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + ta, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(s + tata, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType66(WordEntry lemma) {
		return generateWordFormsClassH(lemma, 1, "е", "", null, null);
	}
	
	public WordEntry[] generateWordFormsType67(WordEntry lemma) {
		return generateWordFormsClassH(lemma, 2, "те", "ц", null, null);
	}
	
	public WordEntry[] generateWordFormsType68(WordEntry lemma) {
		return generateWordFormsClassJ(lemma, 1, "е", "", null, null);
	}
	
	public WordEntry[] generateWordFormsType69(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[3];
		entries[0] = new WordEntry(s + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(s + na, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(s + nata, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType70(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "е", "", "", "");
		WordEntry[] entries = new WordEntry[5];
		entries[0] = new WordEntry(s   + to, lemma.id, encodeSingularDefinite(uid));
		entries[1] = new WordEntry(mod + esa, lemma.id, encodePluralIndefinite(uid));
		entries[2] = new WordEntry(mod + eta, lemma.id, encodePluralIndefinite(uid));
		entries[3] = new WordEntry(mod + esata, lemma.id, encodePluralDefinite(uid));
		entries[4] = new WordEntry(mod + etata, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType71(WordEntry lemma) {
		return generateWordFormsClassJ2(lemma, 1, "е", "", null, null);
	}
	
	public WordEntry[] generateWordFormsType72(WordEntry lemma) {
		return generateWordFormsClassJ(lemma, 1, "е", "", null, null);
	}
	
	public WordEntry[] generateWordFormsType73(WordEntry lemma) {
		return generateWordFormsType65(lemma);
	}
	
	public WordEntry[] generateWordFormsType74(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[1];
		entries[0] = new WordEntry(s + ta, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType75(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[1];
		entries[0] = new WordEntry(s + te, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType76(WordEntry lemma) {
		return generateWordFormsClassK(lemma, 0, "", "", i, false, false, false);
	}
	
	public WordEntry[] generateWordFormsType77(WordEntry lemma) {
		return generateWordFormsClassK(lemma, 0, "", "", i, false, false, true);
	}
	
	public WordEntry[] generateWordFormsType78(WordEntry lemma) {
		return generateWordFormsClassK(lemma, 1, "и", "", i, false, false, false);
	}
	
	public WordEntry[] generateWordFormsType79(WordEntry lemma) {
		return generateWordFormsClassK(lemma, 2, "е", "", i, false, false, false);
	}
	
	public WordEntry[] generateWordFormsType80(WordEntry lemma) {
		return generateWordFormsClassK(lemma, 2, "ъ", "", i, false, false, false);
	}
	
	public WordEntry[] generateWordFormsType81(WordEntry lemma) {
		return generateWordFormsClassL(lemma, 2, "я", "е", "", "", i, false, false, false);
	}
	
	public WordEntry[] generateWordFormsType82(WordEntry lemma) {
		return generateWordFormsClassK(lemma, 3, "ръ", "ър", i, false, false, false);
	}
	
	public WordEntry[] generateWordFormsType82a(WordEntry lemma) {
		return generateWordFormsClassK(lemma, 5, "ързък", "ръзк", i, false, false, false);
	}
	
	public WordEntry[] generateWordFormsType83(WordEntry lemma) {
		return generateWordFormsClassL(lemma, 4, "я", "е", "ък", "к", i, false, false, false);
	}
	
	public WordEntry[] generateWordFormsType84(WordEntry lemma) {
		return generateWordFormsClassM(lemma, 4, "е", "я", "ен", "н", i, false, false, false);
	}
	
	public WordEntry[] generateWordFormsType84a(WordEntry lemma) {
		return generateWordFormsClassM(lemma, 5, "е", "я", "ен", "н", i, false, false, false);
	}
	
	public WordEntry[] generateWordFormsType85(WordEntry lemma) {
		return generateWordFormsClassK(lemma, 2, "е", "й", i, false, false, false);
	}
	
	public WordEntry[] generateWordFormsType86(WordEntry lemma) {
		String[] sfs = { iya, iyat, ya, yata, yo, yoto, i, ite };
		
		boolean[] mods = { false, false, false, false, false, false, false, false, false };
		
		return generateWordFormsAdjClass (
			lemma, 0, "", "", "", "", i, mods, sfs
		);
	}
	
	public WordEntry[] generateWordFormsType87(WordEntry lemma) {
		return generateWordFormsClassK(lemma, 1, "и", "", i, false, false, true);
	}
	
	public WordEntry[] generateWordFormsType88(WordEntry lemma) {
		return generateWordFormsClassK(lemma, 1, "и", "", i, false, true, true);
	}
	
	public WordEntry[] generateWordFormsType89(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 2, "ия", "", "", "");
		WordEntry[] entries = new WordEntry[4];
		entries[0] = new WordEntry(mod + iyat, lemma.id, encodeSingularDefiniteFullM(uid));
		entries[1] = new WordEntry(mod + ata, lemma.id, encodeSingularDefiniteF(uid));
		entries[2] = new WordEntry(mod + oto, lemma.id, encodeSingularDefiniteN(uid));
		entries[3] = new WordEntry(mod + ite, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType89a(WordEntry lemma) {
		String[] sfs = { "", "", "", "", "", "", "", "" };
		
		boolean[] mods = { false, false, false, false, false, false, false, false, false };
		
		return generateWordFormsAdjClass (
			lemma, 0, "", "", "", "", "", mods, sfs
		);
	}
	
	public WordEntry[] generateWordFormsType131(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 2, "и", "", "", "");
		WordEntry[] entries = new WordEntry[8];
		entries[0] = new WordEntry(s   + iya, lemma.id, encodeSingularDefiniteM(uid));
		entries[1] = new WordEntry(s   + iyat, lemma.id, encodeSingularDefiniteFullM(uid));
		entries[2] = new WordEntry(mod + a_, lemma.id, encodeSingularIndefiniteF(uid));
		entries[3] = new WordEntry(mod + ata, lemma.id, encodeSingularDefiniteF(uid));
		entries[4] = new WordEntry(mod + o, lemma.id, encodeSingularIndefiniteN(uid));
		entries[5] = new WordEntry(mod + oto, lemma.id, encodeSingularDefiniteN(uid));
		entries[6] = new WordEntry(mod + i, lemma.id, encodePluralIndefinite(uid));
		entries[7] = new WordEntry(mod + ite, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType132(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "а", "", "", "");
		WordEntry[] entries = new WordEntry[7];
		entries[0] = new WordEntry(s   + ta, lemma.id, encodePluralDefiniteM(uid));
		entries[1] = new WordEntry(mod + e, lemma.id, encodePluralIndefiniteF(uid));
		entries[2] = new WordEntry(mod + ete, lemma.id, encodePluralDefiniteF(uid));
		entries[3] = new WordEntry(mod + e, lemma.id, encodePluralIndefiniteN(uid));
		entries[4] = new WordEntry(mod + ete, lemma.id, encodePluralDefiniteN(uid));
		entries[5] = new WordEntry(s   + ma, lemma.id, encodePluralIndefiniteM(uid));
		entries[6] = new WordEntry(s   + mata, lemma.id, encodePluralDefiniteM(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType133(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[7];
		entries[0] = new WordEntry(s + te, lemma.id, encodePluralDefiniteM(uid));
		entries[1] = new WordEntry(s, lemma.id, encodePluralIndefiniteF(uid));
		entries[2] = new WordEntry(s + te, lemma.id, encodePluralDefiniteF(uid));
		entries[3] = new WordEntry(s , lemma.id, encodePluralIndefiniteN(uid));
		entries[4] = new WordEntry(s + te, lemma.id, encodePluralDefiniteN(uid));
		entries[5] = new WordEntry(s + ma, lemma.id, encodePluralIndefiniteM(uid));
		entries[6] = new WordEntry(s + mata, lemma.id, encodePluralDefiniteM(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType134(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[7];
		entries[0] = new WordEntry(s + te, lemma.id, encodePluralDefiniteM(uid));
		entries[1] = new WordEntry(s, lemma.id, encodePluralIndefiniteF(uid));
		entries[2] = new WordEntry(s + te, lemma.id, encodePluralDefiniteF(uid));
		entries[3] = new WordEntry(s , lemma.id, encodePluralIndefiniteN(uid));
		entries[4] = new WordEntry(s + te, lemma.id, encodePluralDefiniteN(uid));
		entries[5] = new WordEntry(s + ima, lemma.id, encodePluralIndefiniteM(uid));
		entries[6] = new WordEntry(s + imata, lemma.id, encodePluralDefiniteM(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType134a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[9];
		entries[0] = new WordEntry(s + te, lemma.id, encodePluralDefiniteM(uid));
		entries[1] = new WordEntry(s, lemma.id, encodePluralIndefiniteF(uid));
		entries[2] = new WordEntry(s + te, lemma.id, encodePluralDefiniteF(uid));
		entries[3] = new WordEntry(s , lemma.id, encodePluralIndefiniteN(uid));
		entries[4] = new WordEntry(s + te, lemma.id, encodePluralDefiniteN(uid));
		entries[5] = new WordEntry(s + ima, lemma.id, encodePluralIndefiniteM(uid));
		entries[6] = new WordEntry(s + imata, lemma.id, encodePluralDefiniteM(uid));
		entries[7] = new WordEntry(s + ina, lemma.id, encodePluralIndefiniteNone(uid));
		entries[8] = new WordEntry(s + inata, lemma.id, encodePluralDefiniteNone(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType135(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 2, "е", "", "", "");
		WordEntry[] entries = new WordEntry[7];
		entries[0] = new WordEntry(s + te, lemma.id, encodePluralDefiniteM(uid));
		entries[1] = new WordEntry(s, lemma.id, encodePluralIndefiniteF(uid));
		entries[2] = new WordEntry(s + te, lemma.id, encodePluralDefiniteF(uid));
		entries[3] = new WordEntry(s , lemma.id, encodePluralIndefiniteN(uid));
		entries[4] = new WordEntry(s + te, lemma.id, encodePluralDefiniteN(uid));
		entries[5] = new WordEntry(mod + ina, lemma.id, encodePluralIndefiniteM(uid));
		entries[6] = new WordEntry(mod + inata, lemma.id, encodePluralDefiniteM(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType136(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[7];
		entries[0] = new WordEntry(s + te, lemma.id, encodePluralDefiniteM(uid));
		entries[1] = new WordEntry(s, lemma.id, encodePluralIndefiniteF(uid));
		entries[2] = new WordEntry(s + te, lemma.id, encodePluralDefiniteF(uid));
		entries[3] = new WordEntry(s , lemma.id, encodePluralIndefiniteN(uid));
		entries[4] = new WordEntry(s + te, lemma.id, encodePluralDefiniteN(uid));
		entries[5] = new WordEntry(s + tina, lemma.id, encodePluralIndefiniteNone(uid));
		entries[6] = new WordEntry(s + tinata, lemma.id, encodePluralDefiniteNone(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType137(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[7];
		entries[0] = new WordEntry(s + te, lemma.id, encodePluralDefiniteM(uid));
		entries[1] = new WordEntry(s, lemma.id, encodePluralIndefiniteF(uid));
		entries[2] = new WordEntry(s + te, lemma.id, encodePluralDefiniteF(uid));
		entries[3] = new WordEntry(s , lemma.id, encodePluralIndefiniteN(uid));
		entries[4] = new WordEntry(s + te, lemma.id, encodePluralDefiniteN(uid));
		entries[5] = new WordEntry(s + a_, lemma.id, encodePluralIndefiniteNone(uid));
		entries[6] = new WordEntry(s + ata, lemma.id, encodePluralDefiniteNone(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType137a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[1];
		entries[0] = new WordEntry(s + ta, lemma.id, encodePluralDefiniteNone(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType138(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "а", "", "", "");
		
		WordEntry[] entries = new WordEntry[10];
		entries[0] = new WordEntry(mod + ata, lemma.id, encodeSingularDefiniteF(uid));
		entries[2] = new WordEntry(mod + i, lemma.id, encodePluralIndefiniteNone(uid));
		entries[3] = new WordEntry(mod + ite, lemma.id, encodePluralDefiniteNone(uid));
		entries[4] = new WordEntry(s, lemma.id, encodePluralIndefiniteM(uid));
		entries[5] = new WordEntry(mod + ata, lemma.id, encodePluralDefiniteM(uid));
		entries[6] = new WordEntry(s, lemma.id, encodePluralIndefiniteF(uid));
		entries[7] = new WordEntry(mod + ata, lemma.id, encodePluralDefiniteF(uid));
		entries[8] = new WordEntry(s , lemma.id, encodePluralIndefiniteN(uid));
		entries[9] = new WordEntry(mod + ata, lemma.id, encodePluralDefiniteN(uid));
		
		// TODO: brojna forma?
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType139(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		WordEntry[] entries = new WordEntry[10];
		entries[0] = new WordEntry(s + a_, lemma.id, encodeSingularDefiniteM(uid));
		entries[1] = new WordEntry(s + yt, lemma.id, encodeSingularDefiniteFullM(uid));
		entries[2] = new WordEntry(s + i, lemma.id, encodePluralIndefiniteNone(uid));
		entries[3] = new WordEntry(s + ite, lemma.id, encodePluralDefiniteNone(uid));
		entries[4] = new WordEntry(s, lemma.id, encodePluralIndefiniteM(uid));
		entries[5] = new WordEntry(s + a_, lemma.id, encodePluralDefiniteM(uid));
		entries[6] = new WordEntry(s, lemma.id, encodePluralIndefiniteF(uid));
		entries[7] = new WordEntry(s + a_, lemma.id, encodePluralDefiniteF(uid));
		entries[8] = new WordEntry(s , lemma.id, encodePluralIndefiniteN(uid));
		entries[9] = new WordEntry(s + a_, lemma.id, encodePluralDefiniteN(uid));
		
		// TODO: brojna forma?
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType140(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 3, "ръ", "ър", "", "");
		WordEntry[] entries = new WordEntry[8];
		entries[0] = new WordEntry(mod + iya, lemma.id, encodeSingularDefiniteM(uid));
		entries[1] = new WordEntry(mod + iyat, lemma.id, encodeSingularDefiniteFullM(uid));
		entries[2] = new WordEntry(mod + a_, lemma.id, encodeSingularIndefiniteF(uid));
		entries[3] = new WordEntry(mod + ata, lemma.id, encodeSingularDefiniteF(uid));
		entries[4] = new WordEntry(mod + o, lemma.id, encodeSingularIndefiniteN(uid));
		entries[5] = new WordEntry(mod + oto, lemma.id, encodeSingularDefiniteN(uid));
		entries[6] = new WordEntry(mod + i, lemma.id, encodePluralIndefinite(uid));
		entries[7] = new WordEntry(mod + ite, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType141(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		String mod = transform(lemma.word, 1, "и", "", "", "");
		WordEntry[] entries = new WordEntry[8];
		entries[0] = new WordEntry(mod + iya, lemma.id, encodeSingularDefiniteM(uid));
		entries[1] = new WordEntry(mod + iyat, lemma.id, encodeSingularDefiniteFullM(uid));
		entries[2] = new WordEntry(mod + a_, lemma.id, encodeSingularIndefiniteF(uid));
		entries[3] = new WordEntry(mod + ata, lemma.id, encodeSingularDefiniteF(uid));
		entries[4] = new WordEntry(mod + o, lemma.id, encodeSingularIndefiniteN(uid));
		entries[5] = new WordEntry(mod + oto, lemma.id, encodeSingularDefiniteN(uid));
		entries[6] = new WordEntry(mod + i, lemma.id, encodePluralIndefinite(uid));
		entries[7] = new WordEntry(mod + ite, lemma.id, encodePluralDefinite(uid));
		
		return entries;
	}
	
	public WordEntry[] generateWordFormsType144(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		a.add(new WordEntry(mod + yah, lemma.id, getGrammLabelUid("V-p-f-o1s", uid)));
		a.add(new WordEntry(mod + ya, lemma.id, getGrammLabelUid("V-p-f-o2s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid("V-p-f-o2s", uid)));
		a.add(new WordEntry(mod + ya, lemma.id, getGrammLabelUid("V-p-f-o3s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid("V-p-f-o3s", uid)));
		
		a.add(new WordEntry(mod + yahme, lemma.id, getGrammLabelUid("V-p-f-o1p", uid)));
		a.add(new WordEntry(mod + yahte, lemma.id, getGrammLabelUid("V-p-f-o2p", uid)));
		a.add(new WordEntry(mod + yaha, lemma.id, getGrammLabelUid("V-p-f-o3p", uid)));
		
		// Imperfect
		importVpitf_m(lemma, mod, a);
		
		// active particle perfective
		importEntries11("V-p-ca", lemma, mod, a);
		
		// active particle imperfective
		importEntries11("V-i-ca", lemma, mod, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType145(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = lemma.word.substring(0, lemma.word.length() - 2);
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries("V-p-f-", lemma, mod, a);
		
		// Aorist
		importEntries2("V-p-f-", lemma, mod, a);
		
		// Imperfect
		importEntries6("V-p-f-", lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2, a);
		
		// active particle imperfective
		importEntries13("V-i-ca", lemma, mod, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + en, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType145a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_o(lemma, mod, a);
		
		// Imperfect
		importVpitf_m(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries14("V-p-ca", lemma, mod, a);
		
		// active particle imperfective
		importEntries13("V-i-ca", lemma, mod, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + en, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType145b(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(lemma.word, 2, "та", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_o(lemma, mod, a);
		
		// Imperfect
		importVpitf_m(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries14("V-p-ca", lemma, mod2, a);
		
		// active particle imperfective
		importEntries13("V-i-ca", lemma, mod, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType146(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(lemma.word, 2, "да", "ш", "", "");
		String mod3 = transform(lemma.word, 1, "а", "е", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries("V-p-f-", lemma, mod, a);
		
		// Aorist
		importEntries2("V-p-f-", lemma, mod, a);
		
		// Imperfect
		importEntries3("V-p-f-", lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries14("V-p-ca", lemma, mod2, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod3, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType146a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(lemma.word, 3, "йда", "ш", "", "");
		String mod3 = transform(lemma.word, 1, "а", "е", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries("V-p-f-", lemma, mod, a);
		
		// Aorist
		importEntries2("V-p-f-", lemma, mod, a);
		
		// Imperfect
		importEntries3("V-p-f-", lemma, mod, a);
		
		// Imperative
		// TODO: better solution?
		if("дойда".equals(s)) {
			a.add(new WordEntry("ела", lemma.id, getGrammLabelUid("V-p-z--2s", uid)));
			a.add(new WordEntry("елате", lemma.id, getGrammLabelUid("V-p-z---p", uid)));
		}
		
		// active particle perfective
		importEntries14("V-p-ca", lemma, mod2, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod3, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType147(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 2, "я", "е", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries("V-p-f-", lemma, mod, mod2, a);
		
		// Aorist
		importEntries2("V-p-f-", lemma, mod, mod2, a);
		
		// Imperfect
		importEntries3("V-p-f-", lemma, mod2, a);
		
		// Imperative
		a.add(new WordEntry(mod2, lemma.id, getGrammLabelUid("V-p-z--2s", uid)));
		a.add(new WordEntry(mod2 + te, lemma.id, getGrammLabelUid("V-p-z---p", uid)));
		
		// active particle perfective
		importEntries14("V-p-ca", lemma, mod, mod2, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod2 + "е", a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType148(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 1, "к", "ч", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, mod2, a);
		
		// Aorist
		importVpitf_o(lemma, mod, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod2, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod2, a);
		
		// active particle perfective
		importEntries14("V-p-ca", lemma, mod, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod2 + "а", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + en, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType149(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 1, "к", "ч", "", "");
		String mod3 = transform(mod, 2, "е", "я", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, mod2, a);
		
		// Aorist
		importVpitf_o(lemma, mod3, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod2, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod2, a);
		
		// active particle perfective
		importEntries14("V-p-ca", lemma, mod3, mod, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod2 + "а", mod2 + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + en, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType150(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_oB(lemma, mod, a);
		
		// Imperfect
		importVpitf_m(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod + "я", mod + "е", a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "я", mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + yan, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType150a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_oB(lemma, mod, a);
		
		// Imperfect
		importVpitf_m(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod + "я", mod + "е", a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "я", mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + yan, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType151(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod, a);
		
		// Imperfect
		importVpitf_m(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, s, a);
		
		String mod2 = mod + "я";
		String mod3 = mod + "е";
		
		// active particle imperfective
		a.add(new WordEntry(mod2 + l, lemma.id, getGrammLabelUid("V-p-cao-smi", uid)));
		a.add(new WordEntry(mod2 + liya, lemma.id, getGrammLabelUid("V-p-cao-smh", uid)));
		a.add(new WordEntry(mod2 + liyat, lemma.id, getGrammLabelUid("V-p-cao-smf", uid)));
		
		a.add(new WordEntry(mod2 + la, lemma.id, getGrammLabelUid("V-p-cao-sfi", uid)));
		a.add(new WordEntry(mod2 + lata, lemma.id, getGrammLabelUid("V-p-cao-sfd", uid)));
		
		a.add(new WordEntry(mod2 + lo, lemma.id, getGrammLabelUid("V-p-cao-sni", uid)));
		a.add(new WordEntry(mod2 + loto, lemma.id, getGrammLabelUid("V-p-cao-snd", uid)));
		
		a.add(new WordEntry(mod3 + li, lemma.id, getGrammLabelUid("V-p-cao-p-i", uid)));
		a.add(new WordEntry(mod3 + lite, lemma.id, getGrammLabelUid("V-p-cao-p-d", uid)));
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType152(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries("V-p-f-", lemma, mod, a);
		
		// Aorist
		importEntries7("V-p-f-", lemma, mod, a);
		
		// Imperfect
		importEntries3("V-p-f-", lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, s, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + at, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType152a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 3, "я", "е", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		a.add(new WordEntry(mod2 + esh, lemma.id, getGrammLabelUid("V-p-f-r2s", uid)));
		a.add(new WordEntry(mod2 + e, lemma.id, getGrammLabelUid("V-p-f-r3s", uid)));
		
		a.add(new WordEntry(mod2 + em, lemma.id, getGrammLabelUid("V-p-f-r1p", uid)));
		a.add(new WordEntry(mod2 + ete, lemma.id, getGrammLabelUid("V-p-f-r2p", uid)));
		a.add(new WordEntry(mod2 + at, lemma.id, getGrammLabelUid("V-p-f-r3p", uid)));
		
		// Aorist
		importVpitf_oA(lemma, mod, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod2, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod2, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, s, a);
		
		// active particle imperfective
		String mod3 = transform(lemma.word, 4, "ягна", "егне", "", "");
		importEntries12("V-i-ca", lemma, mod3, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + at, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType153(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 2, "я", "е", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, mod2, a);
		
		// Aorist
		importVpitf_oA(lemma, mod, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod2, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod2, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, s, a);
		
		// active particle imperfective
		String mod3 = transform(lemma.word, 3, "яна", "ене", "", "");
		importEntries12("V-i-ca", lemma, mod3, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + at, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType154(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rA(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod + "а", a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType155(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 1, "ч", "к", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + "а", a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType156(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 1, "ж", "з", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries("V-p-f-", lemma, mod, a);
		
		// Aorist
		importEntries7("V-p-f-", lemma, mod2, a);
		
		// Imperfect
		importEntries3("V-p-f-", lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + "а", a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + an, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType157(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 2, "еж", "яз", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + "а", a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType158(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 1, "ж", "г", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + "а", a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType159(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 1, "ш", "с", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + "а", a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType160(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		String mod2 = transform(mod, 1, "е", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries9("V-i-f-", lemma, mod, a);
		
		// Aorist
		importEntries10("V-i-f-", lemma, mod2, a);
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod, a);
		
		// Imperfect
		importEntries3("V-i-f-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + "я", mod, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + yan, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType160a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		String mod2 = transform(mod, 1, "е", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rA(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + "а", a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType161(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rA(lemma, mod, a);
		
		// Aorist
		importVpitf_oE(lemma, mod, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + n, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType161a(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries9("V-p-f-", lemma, mod, a);
		
		// Aorist
		importEntries8("V-p-f-", lemma, mod, a);
		
		// Imperfect
		importEntries3("V-p-f-", lemma, mod, a);
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + t, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType162(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries9("V-i-f-", lemma, mod, a);
		
		// Aorist
		importEntries10("V-i-f-", lemma, mod, a);
		
		// Imperfect
		importEntries3("V-i-f-", lemma, mod, a);
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, s, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType163(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries9("V-p-f-", lemma, mod, a);
		
		// Aorist
		importEntries8("V-p-f-", lemma, mod, a);
		
		// Imperfect
		importEntries3("V-p-f-", lemma, mod, a);
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + t, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType164(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		String mod2 = transform(mod, 1, "е", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rA(lemma, mod, a);
		
		// Aorist
		importVpitf_oB(lemma, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + ya, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + yat, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType165(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// No aorist
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + "е", a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType166(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 1, "г", "ж", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries("V-i-f-", lemma, mod, mod2, a);
		
		// Aorist
		importEntries7("V-i-f-", lemma, mod2, a);
		
		// Imperfect
		importEntries3("V-i-f-", lemma, mod2, a);
		
		// active particle perfective
		importEntries12a("V-p-ca", lemma, mod + y, mod, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod2 + "е", a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod2 + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod2 + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType167(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 1, "к", "ч", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, mod2, a);
		
		// Aorist
		importVpitf_oA(lemma, mod, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod2, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod2, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, s, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod2 + a_, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod2 + asht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod2 + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType168(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "м", "д", "", "");
		String mod2 = transform(s, 2, "ам", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_o(lemma, mod, a);
		
		// Imperfect
		importVpitf_m(lemma, mod, a);
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod2 + a_, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + a_, a);
		
		// active particle imperfective
		importEntries12b("V-i-ca", lemma, mod + ya, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + en, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType169(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "м", "д", "", "");
		String mod2 = transform(s, 2, "ям", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_o(lemma, mod, a);
		
		// Imperfect
		importVpitf_m(lemma, mod, a);
		
		// Imperative
		importImperative3("V-p-z-", lemma, mod2 + ya, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + ya, a);
		
		// active particle imperfective
		importEntries12b("V-i-ca", lemma, mod + ya, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + en, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType170(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(mod, 2, "е", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod2, a);
		
		// Imperfect
		importVpitf_m(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + a_, a);
		
		// active particle imperfective
		importEntries12b("V-i-ca", lemma, mod + ya, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType171(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(s, 3, "ема", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_oD(lemma, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + e, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + et, a);
		
		// deeprichastie
		a.add(new WordEntry(s + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType172(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(s, 4, "ъ", "", "на", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_r(lemma, mod, a);
		
		// Aorist
		importVpitf_oD(lemma, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + e, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + ya, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + et, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType173(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries4("V-p-f-", lemma, mod, a);
		
		// Aorist
		importEntries5("V-p-f-", lemma, mod, a);
		
		// Imperfect
		importEntries3("V-p-f-", lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod + i, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + en, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType174(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries4("V-p-f-", lemma, mod, a);
		
		// Aorist
		importEntries5("V-p-f-", lemma, mod, a);
		
		// Imperfect
		importEntries6("V-p-f-", lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod + i, a);
		
		// active particle imperfective
		importEntries12b("V-i-ca", lemma, mod + ya, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + en, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType175(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries4("V-p-f-", lemma, mod, a);
		
		// Aorist
		importEntries5("V-p-f-", lemma, mod, a);
		
		// Imperfect
		importEntries6("V-p-f-", lemma, mod, a);
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod + i, a);
		
		// active particle imperfective
		importEntries12b("V-i-ca", lemma, mod + ya, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + en, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType176(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rC(lemma, mod, a);
		
		// Aorist
		importVpitf_oC(lemma, mod, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod + i, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + en, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType177(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rB(lemma, mod, a);
		
		// Aorist
		importVpitf_oB(lemma, mod, a);
		
		// Imperfect
		importVpitf_m(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, s, mod + e, a);
		
		// active particle imperfective
		importEntries12b("V-i-ca", lemma, s, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + yan, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType178(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rC(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, s, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + e, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + asht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType179(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(s, 4, "ъ", "", "жа", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rC(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative3("V-p-z-", lemma, mod2 + "ъ", a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, s, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + asht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType180(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rB(lemma, mod, a);
		
		// Aorist
		importVpitf_oB(lemma, mod, a);
		
		// Imperfect
		importVpitf_m(lemma, mod, a);
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, s, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, s, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType181(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		String mod2 = transform(s, 2, "дя", "ж", "", "");
		String mod3 = transform(s, 2, "дя", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rB(lemma, mod, a);
		
		// Aorist
		importVpitf_oB(lemma, mod, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative3("V-p-z-", lemma, mod3, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, s, mod + e, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + an, a);
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType182(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importEntries4("V-p-f-", lemma, mod, a);
		
		// Aorist
		importEntries7("V-p-f-", lemma, mod, a);
		
		// Imperfect
		importEntries6("V-p-f-", lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod + a_, a);
		
		// active particle imperfective
		importEntries12b("V-i-ca", lemma, s, mod + e, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType183(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "а", "", "", "");
		String mod2 = transform(s, 3, "ежа", "яз", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rC(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + a_, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType184(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		String mod2 = transform(s, 3, "е", "", "я", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rB(lemma, mod, a);
		
		// Aorist
		importVpitf_oB(lemma, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + ya, mod2 + e, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + yan, a);
		importEntries15("V-p-cv-", lemma, mod2 + yat, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType185(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 1, "я", "", "", "");
		String mod2 = transform(s, 3, "о", "", "я", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		importVpitf_rB(lemma, mod, a);
		
		// Aorist
		importVpitf_oA(lemma, mod2, a);
		
		// Imperfect
		importVpitf_mA(lemma, mod, a);
		
		// Imperative
		importImperative("V-p-z-", lemma, mod, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod2 + a_, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + e, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod2 + an, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + esht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + e + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType186(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 2, "ам", "", "", "");
		
		ArrayList<WordEntry> al = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		al.add(new WordEntry(mod + ash, lemma.id, getGrammLabelUid("V-i-f-r2s", uid)));
		al.add(new WordEntry(mod + a_, lemma.id, getGrammLabelUid("V-i-f-r3s", uid)));
		
		al.add(new WordEntry(mod + ame, lemma.id, getGrammLabelUid("V-i-f-r1p", uid)));
		al.add(new WordEntry(mod + ate, lemma.id, getGrammLabelUid("V-i-f-r2p", uid)));
		al.add(new WordEntry(mod + at, lemma.id, getGrammLabelUid("V-i-f-r3p", uid)));
		
		// Aorist
		importEntries7("V-i-f-", lemma, mod, al);
		
		// Imperfect
		al.add(new WordEntry(mod + ah, lemma.id, getGrammLabelUid("V-i-f-m1s", uid)));
		al.add(new WordEntry(mod + ashe, lemma.id, getGrammLabelUid("V-i-f-m2s", uid)));
		al.add(new WordEntry(mod + ashe, lemma.id, getGrammLabelUid("V-i-f-m3s", uid)));
		
		al.add(new WordEntry(mod + ahme, lemma.id, getGrammLabelUid("V-i-f-m1p", uid)));
		al.add(new WordEntry(mod + ahte, lemma.id, getGrammLabelUid("V-i-f-m2p", uid)));
		al.add(new WordEntry(mod + aha, lemma.id, getGrammLabelUid("V-i-f-m3p", uid)));
		
		// deeprichastie
		al.add(new WordEntry(mod + a_ + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod + a_, al);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod + a_, al);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + a_, al);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + an, al);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + asht, al);
		
		return al.toArray(new WordEntry[0]);
	}
	
	public WordEntry[] generateWordFormsType187(WordEntry lemma) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		String mod = transform(lemma.word, 2, "ям", "", "", "");
		
		ArrayList<WordEntry> a = new ArrayList<WordEntry>();
		
		// Izyavitelno naklonenie
		
		// Segashno vreme
		a.add(new WordEntry(mod + yash, lemma.id, getGrammLabelUid("V-i-f-r2s", uid)));
		a.add(new WordEntry(mod + ya, lemma.id, getGrammLabelUid("V-i-f-r3s", uid)));
		
		a.add(new WordEntry(mod + yame, lemma.id, getGrammLabelUid("V-i-f-r1p", uid)));
		a.add(new WordEntry(mod + yate, lemma.id, getGrammLabelUid("V-i-f-r2p", uid)));
		a.add(new WordEntry(mod + yat, lemma.id, getGrammLabelUid("V-i-f-r3p", uid)));
		
		// Aorist
		importVpitf_oB(lemma, mod, a);
		
		// Imperfect
		a.add(new WordEntry(mod + yah, lemma.id, getGrammLabelUid("V-i-f-m1s", uid)));
		a.add(new WordEntry(mod + yashe, lemma.id, getGrammLabelUid("V-i-f-m2s", uid)));
		a.add(new WordEntry(mod + yashe, lemma.id, getGrammLabelUid("V-i-f-m3s", uid)));
		
		a.add(new WordEntry(mod + yahme, lemma.id, getGrammLabelUid("V-i-f-m1p", uid)));
		a.add(new WordEntry(mod + yahte, lemma.id, getGrammLabelUid("V-i-f-m2p", uid)));
		a.add(new WordEntry(mod + yaha, lemma.id, getGrammLabelUid("V-i-f-m3p", uid)));
		
		// Imperative
		importImperative2("V-p-z-", lemma, mod + ya, a);
		
		// active particle perfective
		importEntries12("V-p-ca", lemma, mod + ya, a);
		
		// active particle imperfective
		importEntries12("V-i-ca", lemma, mod + ya, a);
		
		// passive particle
		importEntries15("V-p-cv-", lemma, mod + yan, a);
		
		// active particle present
		importEntries15("V-i-car", lemma, mod + yasht, a);
		
		// deeprichastie
		a.add(new WordEntry(mod + ya + yki, lemma.id, getGrammLabelUid("V-i-g", uid)));
		
		return a.toArray(new WordEntry[0]);
	}
	
	private static void importImperative(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + i, lemma.id, getGrammLabelUid(btbTag + "-2s", uid)));
		a.add(new WordEntry(mod + ete, lemma.id, getGrammLabelUid(btbTag + "--p", uid)));
	}
	
	private static void importImperative2(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + y, lemma.id, getGrammLabelUid(btbTag + "-2s", uid)));
		a.add(new WordEntry(mod + yte, lemma.id, getGrammLabelUid(btbTag + "--p", uid)));
	}
	
	private static void importImperative3(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + zh, lemma.id, getGrammLabelUid(btbTag + "-2s", uid)));
		a.add(new WordEntry(mod + zhte, lemma.id, getGrammLabelUid(btbTag + "--p", uid)));
	}
	
	private static void importEntries(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + esh, lemma.id, getGrammLabelUid(btbTag + "r2s", uid)));
		a.add(new WordEntry(mod + e, lemma.id, getGrammLabelUid(btbTag + "r3s", uid)));
		
		a.add(new WordEntry(mod + em, lemma.id, getGrammLabelUid(btbTag + "r1p", uid)));
		a.add(new WordEntry(mod + ete, lemma.id, getGrammLabelUid(btbTag + "r2p", uid)));
		a.add(new WordEntry(mod + at, lemma.id, getGrammLabelUid(btbTag + "r3p", uid)));
	}
	
	private static void importEntries(String btbTag, WordEntry lemma, String mod, String mod2, ArrayList<WordEntry> a) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod2 + esh, lemma.id, getGrammLabelUid(btbTag + "r2s", uid)));
		a.add(new WordEntry(mod2 + e, lemma.id, getGrammLabelUid(btbTag + "r3s", uid)));
		
		a.add(new WordEntry(mod2 + em, lemma.id, getGrammLabelUid(btbTag + "r1p", uid)));
		a.add(new WordEntry(mod2 + ete, lemma.id, getGrammLabelUid(btbTag + "r2p", uid)));
		a.add(new WordEntry(mod + at, lemma.id, getGrammLabelUid(btbTag + "r3p", uid)));
	}
	
	private static void importEntries4(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + ish, lemma.id, getGrammLabelUid(btbTag + "r2s", uid)));
		a.add(new WordEntry(mod + i, lemma.id, getGrammLabelUid(btbTag + "r3s", uid)));
		
		a.add(new WordEntry(mod + im, lemma.id, getGrammLabelUid(btbTag + "r1p", uid)));
		a.add(new WordEntry(mod + ite, lemma.id, getGrammLabelUid(btbTag + "r2p", uid)));
		a.add(new WordEntry(mod + yat, lemma.id, getGrammLabelUid(btbTag + "r3p", uid)));
	}
	
	private static void importEntries9(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + esh, lemma.id, getGrammLabelUid(btbTag + "r2s", uid)));
		a.add(new WordEntry(mod + e, lemma.id, getGrammLabelUid(btbTag + "r3s", uid)));
		
		a.add(new WordEntry(mod + em, lemma.id, getGrammLabelUid(btbTag + "r1p", uid)));
		a.add(new WordEntry(mod + ete, lemma.id, getGrammLabelUid(btbTag + "r2p", uid)));
		a.add(new WordEntry(mod + yat, lemma.id, getGrammLabelUid(btbTag + "r3p", uid)));
	}
	
	private static void importEntries2(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + oh, lemma.id, getGrammLabelUid(btbTag + "o1s", uid)));
		a.add(new WordEntry(mod + e, lemma.id, getGrammLabelUid(btbTag + "o2s", uid)));
		a.add(new WordEntry(mod + e, lemma.id, getGrammLabelUid(btbTag + "o3s", uid)));
		
		a.add(new WordEntry(mod + ohme, lemma.id, getGrammLabelUid(btbTag + "o1p", uid)));
		a.add(new WordEntry(mod + ohte, lemma.id, getGrammLabelUid(btbTag + "o2p", uid)));
		a.add(new WordEntry(mod + oha, lemma.id, getGrammLabelUid(btbTag + "o3p", uid)));
	}
	
	private static void importEntries2(String btbTag, WordEntry lemma, String mod, String mod2, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + oh, lemma.id, getGrammLabelUid(btbTag + "o1s", uid)));
		a.add(new WordEntry(mod2 + e, lemma.id, getGrammLabelUid(btbTag + "o2s", uid)));
		a.add(new WordEntry(mod2 + e, lemma.id, getGrammLabelUid(btbTag + "o3s", uid)));
		
		a.add(new WordEntry(mod + ohme, lemma.id, getGrammLabelUid(btbTag + "o1p", uid)));
		a.add(new WordEntry(mod + ohte, lemma.id, getGrammLabelUid(btbTag + "o2p", uid)));
		a.add(new WordEntry(mod + oha, lemma.id, getGrammLabelUid(btbTag + "o3p", uid)));
	}
	
	private static void importEntries5(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + ih, lemma.id, getGrammLabelUid(btbTag + "o1s", uid)));
		a.add(new WordEntry(mod + i, lemma.id, getGrammLabelUid(btbTag + "o2s", uid)));
		a.add(new WordEntry(mod + i, lemma.id, getGrammLabelUid(btbTag + "o3s", uid)));
		
		a.add(new WordEntry(mod + ihme, lemma.id, getGrammLabelUid(btbTag + "o1p", uid)));
		a.add(new WordEntry(mod + ihte, lemma.id, getGrammLabelUid(btbTag + "o2p", uid)));
		a.add(new WordEntry(mod + iha, lemma.id, getGrammLabelUid(btbTag + "o3p", uid)));
	}
	
	private static void importEntries7(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> al) {
		int uid = lemma.grammLabelUid;
		
		al.add(new WordEntry(mod + ah, lemma.id, getGrammLabelUid(btbTag + "o1s", uid)));
		al.add(new WordEntry(mod + a_, lemma.id, getGrammLabelUid(btbTag + "o2s", uid)));
		al.add(new WordEntry(mod + a_, lemma.id, getGrammLabelUid(btbTag + "o3s", uid)));
		
		al.add(new WordEntry(mod + ahme, lemma.id, getGrammLabelUid(btbTag + "o1p", uid)));
		al.add(new WordEntry(mod + ahte, lemma.id, getGrammLabelUid(btbTag + "o2p", uid)));
		al.add(new WordEntry(mod + aha, lemma.id, getGrammLabelUid(btbTag + "o3p", uid)));
	}
	
	private static void importEntries8(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> al) {
		int uid = lemma.grammLabelUid;
		
		al.add(new WordEntry(mod + h, lemma.id, getGrammLabelUid(btbTag + "o1s", uid)));
		al.add(new WordEntry(mod, lemma.id, getGrammLabelUid(btbTag + "o2s", uid)));
		al.add(new WordEntry(mod, lemma.id, getGrammLabelUid(btbTag + "o3s", uid)));
		
		al.add(new WordEntry(mod + hme, lemma.id, getGrammLabelUid(btbTag + "o1p", uid)));
		al.add(new WordEntry(mod + hte, lemma.id, getGrammLabelUid(btbTag + "o2p", uid)));
		al.add(new WordEntry(mod + ha, lemma.id, getGrammLabelUid(btbTag + "o3p", uid)));
	}
	
	private static void importEntries10(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + yah, lemma.id, getGrammLabelUid(btbTag + "o1s", uid)));
		a.add(new WordEntry(mod + ya, lemma.id, getGrammLabelUid(btbTag + "o2s", uid)));
		a.add(new WordEntry(mod + ya, lemma.id, getGrammLabelUid(btbTag + "o3s", uid)));
		
		a.add(new WordEntry(mod + yahme, lemma.id, getGrammLabelUid(btbTag + "o1p", uid)));
		a.add(new WordEntry(mod + yahte, lemma.id, getGrammLabelUid(btbTag + "o2p", uid)));
		a.add(new WordEntry(mod + yaha, lemma.id, getGrammLabelUid(btbTag + "o3p", uid)));
	}
	
	private static void importEntries3(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + eh, lemma.id, getGrammLabelUid(btbTag + "m1s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid(btbTag + "m2s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid(btbTag + "m3s", uid)));
		
		a.add(new WordEntry(mod + ehme, lemma.id, getGrammLabelUid(btbTag + "m1p", uid)));
		a.add(new WordEntry(mod + ehte, lemma.id, getGrammLabelUid(btbTag + "m2p", uid)));
		a.add(new WordEntry(mod + eha, lemma.id, getGrammLabelUid(btbTag + "m3p", uid)));
	}
	
	private static void importEntries6(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + yah, lemma.id, getGrammLabelUid(btbTag + "m1s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid(btbTag + "m2s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid(btbTag + "m3s", uid)));
		
		a.add(new WordEntry(mod + yahme, lemma.id, getGrammLabelUid(btbTag + "m1p", uid)));
		a.add(new WordEntry(mod + yahte, lemma.id, getGrammLabelUid(btbTag + "m2p", uid)));
		a.add(new WordEntry(mod + yaha, lemma.id, getGrammLabelUid(btbTag + "m3p", uid)));
	}
	
	private static void importEntries11(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + yal, lemma.id, getGrammLabelUid(btbTag + "o-smi", uid)));
		a.add(new WordEntry(mod + eliya, lemma.id, getGrammLabelUid(btbTag + "o-smh", uid)));
		a.add(new WordEntry(mod + eliyat, lemma.id, getGrammLabelUid(btbTag + "o-smf", uid)));
		
		a.add(new WordEntry(mod + yala, lemma.id, getGrammLabelUid(btbTag + "o-sfi", uid)));
		a.add(new WordEntry(mod + yalata, lemma.id, getGrammLabelUid(btbTag + "o-sfd", uid)));
		
		a.add(new WordEntry(mod + yalo, lemma.id, getGrammLabelUid(btbTag + "o-sni", uid)));
		a.add(new WordEntry(mod + yaloto, lemma.id, getGrammLabelUid(btbTag + "o-snd", uid)));
		
		a.add(new WordEntry(mod + eli, lemma.id, getGrammLabelUid(btbTag + "o-p-i", uid)));
		a.add(new WordEntry(mod + elite, lemma.id, getGrammLabelUid(btbTag + "o-p-d", uid)));
	}
	
	private static void importEntries12(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + l, lemma.id, getGrammLabelUid(btbTag + "o-smi", uid)));
		a.add(new WordEntry(mod + liya, lemma.id, getGrammLabelUid(btbTag + "o-smh", uid)));
		a.add(new WordEntry(mod + liyat, lemma.id, getGrammLabelUid(btbTag + "o-smf", uid)));
		
		a.add(new WordEntry(mod + la, lemma.id, getGrammLabelUid(btbTag + "o-sfi", uid)));
		a.add(new WordEntry(mod + lata, lemma.id, getGrammLabelUid(btbTag + "o-sfd", uid)));
		
		a.add(new WordEntry(mod + lo, lemma.id, getGrammLabelUid(btbTag + "o-sni", uid)));
		a.add(new WordEntry(mod + loto, lemma.id, getGrammLabelUid(btbTag + "o-snd", uid)));
		
		a.add(new WordEntry(mod + li, lemma.id, getGrammLabelUid(btbTag + "o-p-i", uid)));
		a.add(new WordEntry(mod + lite, lemma.id, getGrammLabelUid(btbTag + "o-p-d", uid)));
	}
	
	private static void importEntries12(String btbTag, WordEntry lemma, String mod, String mod2, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + l, lemma.id, getGrammLabelUid(btbTag + "o-smi", uid)));
		a.add(new WordEntry(mod2 + liya, lemma.id, getGrammLabelUid(btbTag + "o-smh", uid)));
		a.add(new WordEntry(mod2 + liyat, lemma.id, getGrammLabelUid(btbTag + "o-smf", uid)));
		
		a.add(new WordEntry(mod + la, lemma.id, getGrammLabelUid(btbTag + "o-sfi", uid)));
		a.add(new WordEntry(mod + lata, lemma.id, getGrammLabelUid(btbTag + "o-sfd", uid)));
		
		a.add(new WordEntry(mod + lo, lemma.id, getGrammLabelUid(btbTag + "o-sni", uid)));
		a.add(new WordEntry(mod + loto, lemma.id, getGrammLabelUid(btbTag + "o-snd", uid)));
		
		a.add(new WordEntry(mod2 + li, lemma.id, getGrammLabelUid(btbTag + "o-p-i", uid)));
		a.add(new WordEntry(mod2 + lite, lemma.id, getGrammLabelUid(btbTag + "o-p-d", uid)));
	}
	
	private static void importEntries12a(String btbTag, WordEntry lemma, String mod, String mod2, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + l, lemma.id, getGrammLabelUid(btbTag + "o-smi", uid)));
		a.add(new WordEntry(mod2 + liya, lemma.id, getGrammLabelUid(btbTag + "o-smh", uid)));
		a.add(new WordEntry(mod2 + liyat, lemma.id, getGrammLabelUid(btbTag + "o-smf", uid)));
		
		a.add(new WordEntry(mod2 + la, lemma.id, getGrammLabelUid(btbTag + "o-sfi", uid)));
		a.add(new WordEntry(mod2 + lata, lemma.id, getGrammLabelUid(btbTag + "o-sfd", uid)));
		
		a.add(new WordEntry(mod2 + lo, lemma.id, getGrammLabelUid(btbTag + "o-sni", uid)));
		a.add(new WordEntry(mod2 + loto, lemma.id, getGrammLabelUid(btbTag + "o-snd", uid)));
		
		a.add(new WordEntry(mod2 + li, lemma.id, getGrammLabelUid(btbTag + "o-p-i", uid)));
		a.add(new WordEntry(mod2 + lite, lemma.id, getGrammLabelUid(btbTag + "o-p-d", uid)));
	}
	
	private static void importEntries12b(String btbTag, WordEntry lemma, String mod, String mod2, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + l, lemma.id, getGrammLabelUid(btbTag + "o-smi", uid)));
		a.add(new WordEntry(mod + liya, lemma.id, getGrammLabelUid(btbTag + "o-smh", uid)));
		a.add(new WordEntry(mod + liyat, lemma.id, getGrammLabelUid(btbTag + "o-smf", uid)));
		
		a.add(new WordEntry(mod + la, lemma.id, getGrammLabelUid(btbTag + "o-sfi", uid)));
		a.add(new WordEntry(mod + lata, lemma.id, getGrammLabelUid(btbTag + "o-sfd", uid)));
		
		a.add(new WordEntry(mod + lo, lemma.id, getGrammLabelUid(btbTag + "o-sni", uid)));
		a.add(new WordEntry(mod + loto, lemma.id, getGrammLabelUid(btbTag + "o-snd", uid)));
		
		a.add(new WordEntry(mod2 + li, lemma.id, getGrammLabelUid(btbTag + "o-p-i", uid)));
		a.add(new WordEntry(mod2 + lite, lemma.id, getGrammLabelUid(btbTag + "o-p-d", uid)));
	}
	
	private static void importEntries13(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + yal, lemma.id, getGrammLabelUid(btbTag + "o-smi", uid)));
		a.add(new WordEntry(mod + yaliya, lemma.id, getGrammLabelUid(btbTag + "o-smh", uid)));
		a.add(new WordEntry(mod + yaliyat, lemma.id, getGrammLabelUid(btbTag + "o-smf", uid)));
		
		a.add(new WordEntry(mod + yala, lemma.id, getGrammLabelUid(btbTag + "o-sfi", uid)));
		a.add(new WordEntry(mod + yalata, lemma.id, getGrammLabelUid(btbTag + "o-sfd", uid)));
		
		a.add(new WordEntry(mod + yalo, lemma.id, getGrammLabelUid(btbTag + "o-sni", uid)));
		a.add(new WordEntry(mod + yaloto, lemma.id, getGrammLabelUid(btbTag + "o-snd", uid)));
		
		a.add(new WordEntry(mod + eli, lemma.id, getGrammLabelUid(btbTag + "o-p-i", uid)));
		a.add(new WordEntry(mod + elite, lemma.id, getGrammLabelUid(btbTag + "o-p-d", uid)));
	}
	
	private static void importEntries14(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + yl, lemma.id, getGrammLabelUid(btbTag + "o-smi", uid)));
		a.add(new WordEntry(mod + liya, lemma.id, getGrammLabelUid(btbTag + "o-smh", uid)));
		a.add(new WordEntry(mod + liyat, lemma.id, getGrammLabelUid(btbTag + "o-smf", uid)));
		
		a.add(new WordEntry(mod + la, lemma.id, getGrammLabelUid(btbTag + "o-sfi", uid)));
		a.add(new WordEntry(mod + lata, lemma.id, getGrammLabelUid(btbTag + "o-sfd", uid)));
		
		a.add(new WordEntry(mod + lo, lemma.id, getGrammLabelUid(btbTag + "o-sni", uid)));
		a.add(new WordEntry(mod + loto, lemma.id, getGrammLabelUid(btbTag + "o-snd", uid)));
		
		a.add(new WordEntry(mod + li, lemma.id, getGrammLabelUid(btbTag + "o-p-i", uid)));
		a.add(new WordEntry(mod + lite, lemma.id, getGrammLabelUid(btbTag + "o-p-d", uid)));
	}
	
	private static void importEntries14(String btbTag, WordEntry lemma, String mod, String mod2, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + yl, lemma.id, getGrammLabelUid(btbTag + "o-smi", uid)));
		a.add(new WordEntry(mod2 + liya, lemma.id, getGrammLabelUid(btbTag + "o-smh", uid)));
		a.add(new WordEntry(mod2 + liyat, lemma.id, getGrammLabelUid(btbTag + "o-smf", uid)));
		
		a.add(new WordEntry(mod + la, lemma.id, getGrammLabelUid(btbTag + "o-sfi", uid)));
		a.add(new WordEntry(mod + lata, lemma.id, getGrammLabelUid(btbTag + "o-sfd", uid)));
		
		a.add(new WordEntry(mod + lo, lemma.id, getGrammLabelUid(btbTag + "o-sni", uid)));
		a.add(new WordEntry(mod + loto, lemma.id, getGrammLabelUid(btbTag + "o-snd", uid)));
		
		a.add(new WordEntry(mod2 + li, lemma.id, getGrammLabelUid(btbTag + "o-p-i", uid)));
		a.add(new WordEntry(mod2 + lite, lemma.id, getGrammLabelUid(btbTag + "o-p-d", uid)));
	}
	
	private static void importEntries15(String btbTag, WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod, lemma.id, getGrammLabelUid(btbTag + "-smi", uid)));
		a.add(new WordEntry(mod + iya, lemma.id, getGrammLabelUid(btbTag + "-smh", uid)));
		a.add(new WordEntry(mod + iyat, lemma.id, getGrammLabelUid(btbTag + "-smf", uid)));
		
		a.add(new WordEntry(mod + a_, lemma.id, getGrammLabelUid(btbTag + "-sfi", uid)));
		a.add(new WordEntry(mod + ata, lemma.id, getGrammLabelUid(btbTag + "-sfd", uid)));
		
		a.add(new WordEntry(mod + o, lemma.id, getGrammLabelUid(btbTag + "-sni", uid)));
		a.add(new WordEntry(mod + oto, lemma.id, getGrammLabelUid(btbTag + "-snd", uid)));
		
		a.add(new WordEntry(mod + i, lemma.id, getGrammLabelUid(btbTag + "-p-i", uid)));
		a.add(new WordEntry(mod + ite, lemma.id, getGrammLabelUid(btbTag + "-p-d", uid)));
	}
	
	private static void importVpitf_r(WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + esh, lemma.id, getGrammLabelUid("V-p-f-r2s", uid)));
		a.add(new WordEntry(mod + e, lemma.id, getGrammLabelUid("V-p-f-r3s", uid)));
		
		a.add(new WordEntry(mod + em, lemma.id, getGrammLabelUid("V-p-f-r1p", uid)));
		a.add(new WordEntry(mod + ete, lemma.id, getGrammLabelUid("V-p-f-r2p", uid)));
		a.add(new WordEntry(mod + at, lemma.id, getGrammLabelUid("V-p-f-r3p", uid)));
	}
	
	private static void importVpitf_r(WordEntry lemma, String mod, String mod2, ArrayList<WordEntry> a) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod2 + esh, lemma.id, getGrammLabelUid("V-p-f-r2s", uid)));
		a.add(new WordEntry(mod2 + e, lemma.id, getGrammLabelUid("V-p-f-r3s", uid)));
		
		a.add(new WordEntry(mod2 + em, lemma.id, getGrammLabelUid("V-p-f-r1p", uid)));
		a.add(new WordEntry(mod2 + ete, lemma.id, getGrammLabelUid("V-p-f-r2p", uid)));
		a.add(new WordEntry(mod + at, lemma.id, getGrammLabelUid("V-p-f-r3p", uid)));
	}
	
	private static void importVpitf_rA(WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + esh, lemma.id, getGrammLabelUid("V-p-f-r2s", uid)));
		a.add(new WordEntry(mod + e, lemma.id, getGrammLabelUid("V-p-f-r3s", uid)));
		
		a.add(new WordEntry(mod + em, lemma.id, getGrammLabelUid("V-p-f-r1p", uid)));
		a.add(new WordEntry(mod + ete, lemma.id, getGrammLabelUid("V-p-f-r2p", uid)));
		a.add(new WordEntry(mod + yat, lemma.id, getGrammLabelUid("V-p-f-r3p", uid)));
	}
	
	private static void importVpitf_rB(WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + ish, lemma.id, getGrammLabelUid("V-p-f-r2s", uid)));
		a.add(new WordEntry(mod + i, lemma.id, getGrammLabelUid("V-p-f-r3s", uid)));
		
		a.add(new WordEntry(mod + im, lemma.id, getGrammLabelUid("V-p-f-r1p", uid)));
		a.add(new WordEntry(mod + ite, lemma.id, getGrammLabelUid("V-p-f-r2p", uid)));
		a.add(new WordEntry(mod + yat, lemma.id, getGrammLabelUid("V-p-f-r3p", uid)));
	}
	
	private static void importVpitf_rC(WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + ish, lemma.id, getGrammLabelUid("V-p-f-r2s", uid)));
		a.add(new WordEntry(mod + i, lemma.id, getGrammLabelUid("V-p-f-r3s", uid)));
		
		a.add(new WordEntry(mod + im, lemma.id, getGrammLabelUid("V-p-f-r1p", uid)));
		a.add(new WordEntry(mod + ite, lemma.id, getGrammLabelUid("V-p-f-r2p", uid)));
		a.add(new WordEntry(mod + at, lemma.id, getGrammLabelUid("V-p-f-r3p", uid)));
	}
	
	private static void importVpitf_o(WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + oh, lemma.id, getGrammLabelUid("V-p-f-o1s", uid)));
		a.add(new WordEntry(mod + e, lemma.id, getGrammLabelUid("V-p-f-o2s", uid)));
		a.add(new WordEntry(mod + e, lemma.id, getGrammLabelUid("V-p-f-o3s", uid)));
		
		a.add(new WordEntry(mod + ohme, lemma.id, getGrammLabelUid("V-p-f-o1p", uid)));
		a.add(new WordEntry(mod + ohte, lemma.id, getGrammLabelUid("V-p-f-o2p", uid)));
		a.add(new WordEntry(mod + oha, lemma.id, getGrammLabelUid("V-p-f-o3p", uid)));
	}
	
	private static void importVpitf_o(WordEntry lemma, String mod, String mod2, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + oh, lemma.id, getGrammLabelUid("V-p-f-o1s", uid)));
		a.add(new WordEntry(mod2 + e, lemma.id, getGrammLabelUid("V-p-f-o2s", uid)));
		a.add(new WordEntry(mod2 + e, lemma.id, getGrammLabelUid("V-p-f-o3s", uid)));
		
		a.add(new WordEntry(mod + ohme, lemma.id, getGrammLabelUid("V-p-f-o1p", uid)));
		a.add(new WordEntry(mod + ohte, lemma.id, getGrammLabelUid("V-p-f-o2p", uid)));
		a.add(new WordEntry(mod + oha, lemma.id, getGrammLabelUid("V-p-f-o3p", uid)));
	}
	
	private static void importVpitf_oA(WordEntry lemma, String mod, ArrayList<WordEntry> al) {
		int uid = lemma.grammLabelUid;
		
		al.add(new WordEntry(mod + ah, lemma.id, getGrammLabelUid("V-p-f-o1s", uid)));
		al.add(new WordEntry(mod + a_, lemma.id, getGrammLabelUid("V-p-f-o2s", uid)));
		al.add(new WordEntry(mod + a_, lemma.id, getGrammLabelUid("V-p-f-o3s", uid)));
		
		al.add(new WordEntry(mod + ahme, lemma.id, getGrammLabelUid("V-p-f-o1p", uid)));
		al.add(new WordEntry(mod + ahte, lemma.id, getGrammLabelUid("V-p-f-o2p", uid)));
		al.add(new WordEntry(mod + aha, lemma.id, getGrammLabelUid("V-p-f-o3p", uid)));
	}
	
	private static void importVpitf_oB(WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + yah, lemma.id, getGrammLabelUid("V-p-f-o1s", uid)));
		a.add(new WordEntry(mod + ya, lemma.id, getGrammLabelUid("V-p-f-o2s", uid)));
		a.add(new WordEntry(mod + ya, lemma.id, getGrammLabelUid("V-p-f-o3s", uid)));
		
		a.add(new WordEntry(mod + yahme, lemma.id, getGrammLabelUid("V-p-f-o1p", uid)));
		a.add(new WordEntry(mod + yahte, lemma.id, getGrammLabelUid("V-p-f-o2p", uid)));
		a.add(new WordEntry(mod + yaha, lemma.id, getGrammLabelUid("V-p-f-o3p", uid)));
	}
	
	private static void importVpitf_oC(WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + ih, lemma.id, getGrammLabelUid("V-p-f-o1s", uid)));
		a.add(new WordEntry(mod + i, lemma.id, getGrammLabelUid("V-p-f-o2s", uid)));
		a.add(new WordEntry(mod + i, lemma.id, getGrammLabelUid("V-p-f-o3s", uid)));
		
		a.add(new WordEntry(mod + ihme, lemma.id, getGrammLabelUid("V-p-f-o1p", uid)));
		a.add(new WordEntry(mod + ihte, lemma.id, getGrammLabelUid("V-p-f-o2p", uid)));
		a.add(new WordEntry(mod + iha, lemma.id, getGrammLabelUid("V-p-f-o3p", uid)));
	}
	
	private static void importVpitf_oD(WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + eh, lemma.id, getGrammLabelUid("V-p-f-o1s", uid)));
		a.add(new WordEntry(mod + e, lemma.id, getGrammLabelUid("V-p-f-o2s", uid)));
		a.add(new WordEntry(mod + e, lemma.id, getGrammLabelUid("V-p-f-o3s", uid)));
		
		a.add(new WordEntry(mod + ehme, lemma.id, getGrammLabelUid("V-p-f-o1p", uid)));
		a.add(new WordEntry(mod + ehte, lemma.id, getGrammLabelUid("V-p-f-o2p", uid)));
		a.add(new WordEntry(mod + eha, lemma.id, getGrammLabelUid("V-p-f-o3p", uid)));
	}
	
	private static void importVpitf_oE(WordEntry lemma, String mod, ArrayList<WordEntry> al) {
		int uid = lemma.grammLabelUid;
		
		al.add(new WordEntry(mod + h, lemma.id, getGrammLabelUid("V-p-f-o1s", uid)));
		al.add(new WordEntry(mod, lemma.id, getGrammLabelUid("V-p-f-o2s", uid)));
		al.add(new WordEntry(mod, lemma.id, getGrammLabelUid("V-p-f-o3s", uid)));
		
		al.add(new WordEntry(mod + hme, lemma.id, getGrammLabelUid("V-p-f-o1p", uid)));
		al.add(new WordEntry(mod + hte, lemma.id, getGrammLabelUid("V-p-f-o2p", uid)));
		al.add(new WordEntry(mod + ha, lemma.id, getGrammLabelUid("V-p-f-o3p", uid)));
	}
	
	private static void importVpitf_m(WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + yah, lemma.id, getGrammLabelUid("V-p-f-m1s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid("V-p-f-m2s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid("V-p-f-m3s", uid)));
		
		a.add(new WordEntry(mod + yahme, lemma.id, getGrammLabelUid("V-p-f-m1p", uid)));
		a.add(new WordEntry(mod + yahte, lemma.id, getGrammLabelUid("V-p-f-m2p", uid)));
		a.add(new WordEntry(mod + yaha, lemma.id, getGrammLabelUid("V-p-f-m3p", uid)));
	}
	
	private static void importVpitf_mA(WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + eh, lemma.id, getGrammLabelUid("V-p-f-m1s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid("V-p-f-m2s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid("V-p-f-m3s", uid)));
		
		a.add(new WordEntry(mod + ehme, lemma.id, getGrammLabelUid("V-p-f-m1p", uid)));
		a.add(new WordEntry(mod + ehte, lemma.id, getGrammLabelUid("V-p-f-m2p", uid)));
		a.add(new WordEntry(mod + eha, lemma.id, getGrammLabelUid("V-p-f-m3p", uid)));
	}
	
	private static void importVpitf_mB(WordEntry lemma, String mod, ArrayList<WordEntry> a) {
		int uid = lemma.grammLabelUid;
		
		a.add(new WordEntry(mod + ah, lemma.id, getGrammLabelUid("V-p-f-m1s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid("V-p-f-m2s", uid)));
		a.add(new WordEntry(mod + eshe, lemma.id, getGrammLabelUid("V-p-f-m3s", uid)));
		
		a.add(new WordEntry(mod + ahme, lemma.id, getGrammLabelUid("V-p-f-m1p", uid)));
		a.add(new WordEntry(mod + ahte, lemma.id, getGrammLabelUid("V-p-f-m2p", uid)));
		a.add(new WordEntry(mod + aha, lemma.id, getGrammLabelUid("V-p-f-m3p", uid)));
	}
	
	private WordEntry[] generateWordFormsClassB (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String countForm, String vocative
	) {
		String[] sfs = { a_, yt, i, ite };
		boolean[] mods = { false, false, true, true, false, false };
		
		return generateWordFormsNounClass (
			lemma, rIdx, sOld, sNew, countForm, vocative, mods, sfs
		);
	}
	
	private WordEntry[] generateWordFormsClassC (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String countForm, String vocative
	) {
		String[] sfs = { a_, yt, e, ete };
		boolean[] mods = { false, false, true, true, false, false };
		
		return generateWordFormsNounClass (
			lemma, rIdx, sOld, sNew, countForm, vocative, mods, sfs
		);
	}
	
	private WordEntry[] generateWordFormsClassD (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String countForm, String vocative
	) {
		String[] sfs = { ya, yat, i, ite };
		boolean[] mods = { true, true, true, true, true, true };
		
		return generateWordFormsNounClass (
			lemma, rIdx, sOld, sNew, countForm, vocative, mods, sfs
		);
	}
	
	private WordEntry[] generateWordFormsClassE (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String countForm, String vocative
	) {
		String[] sfs = { ya, yat, i, ite };
		boolean[] mods = { false, false, true, true, false, false };
		
		return generateWordFormsNounClass (
			lemma, rIdx, sOld, sNew, countForm, vocative, mods, sfs
		);
	}
	
	private WordEntry[] generateWordFormsClassF (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String countForm, String vocative
	) {
		String[] sfs = { ta, i, ite };
		boolean[] mods = { false, true, true, true, true };
		
		return generateWordFormsNounClass (
			lemma, rIdx, sOld, sNew, countForm, vocative, mods, sfs, false
		);
	}
	
	private WordEntry[] generateWordFormsClassG (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String countForm, String vocative
	) {
		String[] sfs = { ta, e, ete };
		boolean[] mods = { false, true, true, true, true };
		
		return generateWordFormsNounClass (
			lemma, rIdx, sOld, sNew, countForm, vocative, mods, sfs, false
		);
	}
	
	private WordEntry[] generateWordFormsClassH (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String countForm, String vocative
	) {
		String[] sfs = { to, a_, ata };
		boolean[] mods = { false, true, true, true, true };
		
		return generateWordFormsNounClass (
			lemma, rIdx, sOld, sNew, countForm, vocative, mods, sfs, false
		);
	}
	
	private WordEntry[] generateWordFormsClassI (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String countForm, String vocative
	) {
		String[] sfs = { to, i, ite };
		boolean[] mods = { false, true, true, true, true };
		
		return generateWordFormsNounClass (
			lemma, rIdx, sOld, sNew, countForm, vocative, mods, sfs, false
		);
	}
	
	private WordEntry[] generateWordFormsClassJ (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String countForm, String vocative
	) {
		String[] sfs = { to, ya, yata };
		boolean[] mods = { false, true, true, true, true };
		
		return generateWordFormsNounClass (
			lemma, rIdx, sOld, sNew, countForm, vocative, mods, sfs, false
		);
	}
	
	private WordEntry[] generateWordFormsClassJ2 (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String countForm, String vocative
	) {
		String[] sfs = { to, iya, iyata };
		boolean[] mods = { false, true, true, true, true };
		
		return generateWordFormsNounClass (
			lemma, rIdx, sOld, sNew, countForm, vocative, mods, sfs, false
		);
	}
	
	private WordEntry[] generateWordFormsClassK (
		WordEntry lemma, int rIdx, String sOld, String sNew, String extForm,
		boolean ya_yat, boolean ya_yata, boolean e_eto
	) {
		String[] sfs = new String[8];
		sfs[0] = ya_yat ? ya : iya;
		sfs[1] = ya_yat ? yat : iyat;
		sfs[2] = ya_yata ? ya : a_;
		sfs[3] = ya_yata ? yata : ata;
		sfs[4] = e_eto ? e : o;
		sfs[5] = e_eto ? eto : oto;
		sfs[6] = i;
		sfs[7] = ite;
		
		boolean[] mods = { true, true, true, true, true, true, true, true, true };
		
		return generateWordFormsAdjClass (
			lemma, rIdx, sOld, sNew, "", "", extForm, mods, sfs
		);
	}
	
	private WordEntry[] generateWordFormsClassL (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String currentSuffix, String newSuffix, String extForm,
		boolean ya_yat, boolean ya_yata, boolean e_eto
	) {
		String[] sfs = new String[8];
		sfs[0] = ya_yat ? ya : iya;
		sfs[1] = ya_yat ? yat : iyat;
		sfs[2] = ya_yata ? ya : a_;
		sfs[3] = ya_yata ? yata : ata;
		sfs[4] = e_eto ? e : o;
		sfs[5] = e_eto ? eto : oto;
		sfs[6] = i;
		sfs[7] = ite;
		
		boolean[] mods = { true, true, false, false, false, false, true, true, true };
		
		return generateWordFormsAdjClass (
			lemma, rIdx, sOld, sNew, currentSuffix, newSuffix, extForm, mods, sfs
		);
	}
	
	private WordEntry[] generateWordFormsClassM (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String currentSuffix, String newSuffix, String extForm,
		boolean ya_yat, boolean ya_yata, boolean e_eto
	) {
		String[] sfs = new String[8];
		sfs[0] = ya_yat ? ya : iya;
		sfs[1] = ya_yat ? yat : iyat;
		sfs[2] = ya_yata ? ya : a_;
		sfs[3] = ya_yata ? yata : ata;
		sfs[4] = e_eto ? e : o;
		sfs[5] = e_eto ? eto : oto;
		sfs[6] = i;
		sfs[7] = ite;
		
		boolean[] mods = { false, false, true, true, true, true, false, false, false };
		
		return generateWordFormsAdjClass (
			lemma, rIdx, sOld, sNew, currentSuffix, newSuffix, extForm, mods, sfs
		);
	}
	
	private WordEntry[] generateWordFormsNounClass (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String countForm, String vocative, boolean[] mods, String[] sufs
	) {
		return generateWordFormsNounClass (
			lemma, rIdx, sOld, sNew, countForm, vocative, mods, sufs, true
		);
	}
	
	private WordEntry[] generateWordFormsNounClass (
		WordEntry lemma, int rIdx, String sOld, String sNew, String countForm,
		String vocative, boolean[] mods, String[] sufs, boolean masculine
	) {
		String s = lemma.word;
		int uid = lemma.grammLabelUid;
		
		int size = 3 + (masculine ? 1 : 0) + (countForm == null ? 0 : 1)
			     + (vocative == null ? 0 : 1);
		
		String mod = transform(lemma.word, rIdx, sOld, sNew, "", "");
		WordEntry[] entries = new WordEntry[size];
		String b = mods[0] ? mod : s;
		entries[0] = new WordEntry(b + sufs[0], lemma.id, encodeSingularDefinite(uid));
		
		int i = 1;
		
		if(masculine) {
			b = mods[i] ? mod : s;
			entries[i] = new WordEntry (
				b + sufs[i++], lemma.id, encodeSingularDefiniteFull(uid)
			);
		}
		
		b = mods[i] ? mod : s;
		entries[i] = new WordEntry(b + sufs[i++], lemma.id, encodePluralIndefinite(uid));
		
		b = mods[i] ? mod : s;
		entries[i] = new WordEntry(b + sufs[i++], lemma.id, encodePluralDefinite(uid));
		
		if (countForm != null) {
			b = mods[3 + (masculine ? 1 : 0)] ? mod : s;
			entries[i++] = new WordEntry(b + countForm, lemma.id, encodeCountForm(uid));
		}
		
		if (vocative != null) {
			b = mods[4 + (masculine ? 1 : 0)] ? mod : s;
			entries[i] = new WordEntry(b + vocative, lemma.id, encodeSingularVocative(uid));
		}
		
		return entries;
	}
	
	private WordEntry[] generateWordFormsAdjClass (
		WordEntry lemma, int rIdx, String sOld, String sNew,
		String currentSuffix, String newSuffix,
		String extForm, boolean[] mods, String[] sufs
	) {
		String s = lemma.word;
		
		if(currentSuffix.length() != 0 || newSuffix.length() != 0) {
			s = transform(s, currentSuffix, newSuffix);
		}
		
		int uid = lemma.grammLabelUid;
		
		int size = 8 + (extForm == null ? 0 : 1);
		
		String mod = transform(lemma.word, rIdx, sOld, sNew, currentSuffix, newSuffix);
		WordEntry[] entries = new WordEntry[size];
		
		String b = mods[0] ? mod : s;
		entries[0] = new WordEntry(b + sufs[0], lemma.id, encodeSingularDefiniteM(uid));
		
		b = mods[1] ? mod : s;
		entries[1] = new WordEntry(b + sufs[1], lemma.id, encodeSingularDefiniteFullM(uid));
		
		b = mods[2] ? mod : s;
		entries[2] = new WordEntry(b + sufs[2], lemma.id, encodeSingularIndefiniteF(uid));
		
		b = mods[3] ? mod : s;
		entries[3] = new WordEntry(b + sufs[3], lemma.id, encodeSingularDefiniteF(uid));
		
		b = mods[4] ? mod : s;
		entries[4] = new WordEntry(b + sufs[4], lemma.id, encodeSingularIndefiniteN(uid));
		
		b = mods[5] ? mod : s;
		entries[5] = new WordEntry(b + sufs[5], lemma.id, encodeSingularDefiniteN(uid));
		
		b = mods[6] ? mod : s;
		entries[6] = new WordEntry(b + sufs[6], lemma.id, encodePluralIndefinite(uid));
		
		b = mods[7] ? mod : s;
		entries[7] = new WordEntry(b + sufs[7], lemma.id, encodePluralDefinite(uid));
		
		if (extForm != null) {
			b = mods[8] ? mod : s;
			entries[8] = new WordEntry(b + extForm, lemma.id, encodeExtendedForm(uid));
		}
		
		return entries;
	}
	
	private final static String a_ = "а";
	private final static String asht = "ащ";
	private final static String ata = "ата";
	private final static String e = "е";
	private final static String en = "ен";
	private final static String ene = "ене";
	private final static String enete = "енете";
	private final static String esa = "еса";
	private final static String esata = "есата";
	private final static String eta = "ета";
	private final static String etata = "етата";
	private final static String ete = "ете";
	private final static String eto = "ето";
	private final static String eve = "еве";
	private final static String evete = "евете";
	private final static String i = "и";
	private final static String ilishta = "илища";
	private final static String ilishtata = "илищата";
	private final static String ima = "има";
	private final static String imata = "имата";
	private final static String ina = "ина";
	private final static String inata = "ината";
	private final static String ishta = "ища";
	private final static String ishtata = "ищата";
	private final static String ite = "ите";
	private final static String iya = "ия";
	private final static String iyat = "ият";
	private final static String iyata = "ията";
	private final static String ko = "ко";
	private final static String ma = "ма";
	private final static String mata = "мата";
	private final static String na = "на";
	private final static String nata = "ната";
	private final static String o = "о";
	private final static String oto = "ото";
	private final static String ovce = "овце";
	private final static String ovcete = "овцете";
	private final static String ovci = "овци";
	private final static String ovcite = "овците";
	private final static String ove = "ове";
	private final static String ovete = "овете";
	private final static String ta = "та";
	private final static String tata = "тата";
	private final static String te = "те";
	private final static String tina = "тина";
	private final static String tinata = "тината";
	private final static String to = "то";
	private final static String ya = "я";
	private final static String yat = "ят";
	private final static String yata = "ята";
	private final static String yo = "ьо";
	private final static String yoto = "ьото";
	private final static String yove = "ьове";
	private final static String yovete = "ьовете";
	private final static String yt = "ът";
	private final static String yu = "ю";
	
	// Verbs
	private final static String _e = " е";
	private final static String _sa = " са";
	private final static String _si = " си";
	private final static String _sme = " сме";
	private final static String _ste = " сте";
	private final static String _sym = " съм";
	
	private final static String ah = "ах";
	private final static String aha = "аха";
	private final static String ahme = "ахме";
	private final static String ahte = "ахте";
	private final static String ame = "аме";
	private final static String an = "ан";
	private final static String ash = "аш";
	private final static String ashe = "аше";
	private final static String ate = "ате";
	private final static String at = "ат";
	private final static String eh = "ех";
	private final static String eha = "еха";
	private final static String ehme = "ехме";
	private final static String ehte = "ехте";
	private final static String eli = "ели";
	private final static String elite = "елите";
	private final static String eliya = "елия";
	private final static String eliyat = "елият";
	private final static String em = "ем";
	private final static String esh = "еш";
	private final static String eshe = "еше";
	private final static String esht = "ещ";
	private final static String et = "ет";
	private final static String h = "х";
	private final static String ha = "ха";
	private final static String hme = "хме";
	private final static String hte = "хте";
	private final static String ih = "их";
	private final static String iha = "иха";
	private final static String ihme = "ихме";
	private final static String ihte = "ихте";
	private final static String im = "им";
	private final static String ish = "иш";
	private final static String l = "л";
	private final static String la = "ла";
	private final static String lata = "лата";
	private final static String li = "ли";
	private final static String lite = "лите";
	private final static String liya = "лия";
	private final static String liyat = "лият";
	private final static String lo = "ло";
	private final static String loto = "лото";
	private final static String n = "н";
	private final static String oh = "ох";
	private final static String oha = "оха";
	private final static String ohme = "охме";
	private final static String ohte = "охте";
	private final static String t = "т";
	private final static String y = "й";
	private final static String yah = "ях";
	private final static String yaha = "яха";
	private final static String yahme = "яхме";
	private final static String yahte = "яхте";
	private final static String yal = "ял";
	private final static String yala = "яла";
	private final static String yalata = "ялата";
	private final static String yaliya = "ялия";
	private final static String yaliyat = "ялият";
	private final static String yalo = "яло";
	private final static String yaloto = "ялото";
	private final static String yame = "яме";
	private final static String yan = "ян";
	private final static String yash = "яш";
	private final static String yashe = "яше";
	private final static String yasht = "ящ";
	private final static String yate = "яте";
	private final static String yki = "йки";
	private final static String yl = "ъл";
	private final static String yte = "йте";
	private final static String zh = "ж";
	private final static String zhte = "жте";
	
	
	public static int encodeSingularIndefinite(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.INDEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.SINGULAR);
		
		return uid;
	}
	
	public static int encodeSingularIndefiniteM(int uid) {
		uid = encodeSingularIndefinite(uid);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.MASCULINE);
		
		return uid;
	}
	
	public static int encodeSingularIndefiniteF(int uid) {
		uid = encodeSingularIndefinite(uid);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.FEMININE);
		
		return uid;
	}
	
	public static int encodeSingularIndefiniteN(int uid) {
		uid = encodeSingularIndefinite(uid);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.NEUTER);
		
		return uid;
	}
	
	public static int encodeSingularDefinite(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.DEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.SINGULAR);
		
		return uid;
	}
	
	public static int encodeSingularDefiniteM(int uid) {
		uid = encodeSingularDefinite(uid);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.MASCULINE);
		
		return uid;
	}
	
	public static int encodeSingularDefiniteF(int uid) {
		uid = encodeSingularDefinite(uid);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.FEMININE);
		
		return uid;
	}
	
	public static int encodeSingularDefiniteN(int uid) {
		uid = encodeSingularDefinite(uid);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.NEUTER);
		
		return uid;
	}
	
	public static int encodeSingularVocative(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.INDEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.SINGULAR);
		uid = GrammaticalLabel.encodeNounCase(uid, GrammaticalLabel.NounCase.VOCATIVE);
		
		return uid;
	}
	
	public static int encodeSingularDefiniteFull(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.DEFINITE_FULL);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.SINGULAR);
		
		return uid;
	}
	
	public static int encodeSingularDefiniteFullM(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.DEFINITE_FULL);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.SINGULAR);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.MASCULINE);
		
		return uid;
	}
	
	public static int encodePluralIndefinite(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.INDEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.PLURAL);
		
		return uid;
	}
	
	public static int encodePluralDefinite(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.DEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.PLURAL);
		
		return uid;
	}
	
	public static int encodePluralIndefiniteNone(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.INDEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.PLURAL);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.NONE);
		
		return uid;
	}
	
	public static int encodePluralDefiniteNone(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.DEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.PLURAL);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.NONE);
		
		return uid;
	}
	
	public static int encodePluralIndefiniteM(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.INDEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.PLURAL);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.MASCULINE);
		
		return uid;
	}
	
	public static int encodePluralDefiniteM(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.DEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.PLURAL);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.MASCULINE);
		
		return uid;
	}
	
	public static int encodePluralIndefiniteF(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.INDEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.PLURAL);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.FEMININE);
		
		return uid;
	}
	
	public static int encodePluralDefiniteF(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.DEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.PLURAL);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.FEMININE);
		
		return uid;
	}
	
	public static int encodePluralIndefiniteN(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.INDEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.PLURAL);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.NEUTER);
		
		return uid;
	}
	
	public static int encodePluralDefiniteN(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.DEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.PLURAL);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.NEUTER);
		
		return uid;
	}
	
	public static int encodeCountForm(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.INDEFINITE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.COUNT_FORM);
		
		return uid;
	}
	
	public static int encodeExtendedForm(int uid) {
		uid = GrammaticalLabel.encodeArticle(uid, GrammaticalLabel.Article.NONE);
		uid = GrammaticalLabel.encodeNumber(uid, GrammaticalLabel.Number.SINGULAR);
		uid = GrammaticalLabel.encodeGender(uid, GrammaticalLabel.Gender.MASCULINE);
		
		GrammaticalLabel.AdjectiveCase c = GrammaticalLabel.AdjectiveCase.EXTENDED;
		uid = GrammaticalLabel.encodeAdjectiveCase(uid, c);
		
		return uid;
	}
	
	public static int encodePronounNominative(int uid) {
		return GrammaticalLabel.encodePronounCase(uid, GrammaticalLabel.PronounCase.NOMINATIVE);
	}
	
	public static int encodePronounAccusativeFull(int uid) {
		uid = GrammaticalLabel.encodePronounCase(uid, GrammaticalLabel.PronounCase.ACCUSATIVE);
		uid = GrammaticalLabel.encodePronounForm(uid, GrammaticalLabel.PronounForm.FULL);
		return uid;
	}
	
	public static int encodePronounAccusativeShort(int uid) {
		uid = GrammaticalLabel.encodePronounCase(uid, GrammaticalLabel.PronounCase.ACCUSATIVE);
		uid = GrammaticalLabel.encodePronounForm(uid, GrammaticalLabel.PronounForm.SHORT);
		return uid;
	}
	
	public static int encodePronounDativeFull(int uid) {
		uid = GrammaticalLabel.encodePronounCase(uid, GrammaticalLabel.PronounCase.DATIVE);
		uid = GrammaticalLabel.encodePronounForm(uid, GrammaticalLabel.PronounForm.FULL);
		return uid;
	}
	
	public static int encodePronounDativeShort(int uid) {
		uid = GrammaticalLabel.encodePronounCase(uid, GrammaticalLabel.PronounCase.DATIVE);
		uid = GrammaticalLabel.encodePronounForm(uid, GrammaticalLabel.PronounForm.SHORT);
		return uid;
	}
	
	public static int encodePronounDativeOld(int uid) {
		uid = GrammaticalLabel.encodePronounCase(uid, GrammaticalLabel.PronounCase.DATIVE);
		uid = GrammaticalLabel.encodePronounForm(uid, GrammaticalLabel.PronounForm.OLD);
		return uid;
	}
	
	/**
	 * 
	 * @param word The word to be transformed and returned as a new string.
	 * @param reverseIdx The reverse position of <code>currentSubstring</code> in the word.
	 * 0 means the end of the string, 1 means the position of the last character, etc.
	 * @param currentSubstring The substring to be replaced with <code>newSubstring</code>.
	 * If the substring word 
	 * @param newSubstring The substring to replace <code>currentSubstring</code>.
	 * @param currentSuffix The suffix to be replaced with <code>newSuffix</code>.
	 * @param newSuffix The suffix to replace <code>currentSuffix</code>.
	 * @return The transformed string.
	 * @throws IllegalArgumentException if word mismatch occur.
	 */
	public static String transform (
		String word,
		int    reverseIdx,
		String currentSubstring,
		String newSubstring,
		String currentSuffix,
		String newSuffix
	) {
		int beginIdx = word.length() - reverseIdx;
		if(beginIdx < 0 || word.length() < beginIdx + currentSubstring.length()) {
			String err = i18n.getError("BgWordformGenerator.wordTooShort");
			throw new IllegalArgumentException(err);
		}
		
		if(!word.regionMatches(beginIdx, currentSubstring, 0, currentSubstring.length())) {
			String err = i18n.getError("BgWordformGenerator.unexpectedSubstring", word);
			throw new IllegalArgumentException(err);
		}
		
		if(!word.endsWith(currentSuffix)) {
			String err = i18n.getError("BgWordformGenerator.unexpectedSuffix");
			throw new IllegalArgumentException(err);
		}
		
		return  word.substring(0, beginIdx) + newSubstring +
			word.substring(beginIdx + currentSubstring.length(), word.length() - currentSuffix.length()) +
			newSuffix;
	}
	
	/**
	 * 
	 * @param word The word to be transformed and returned as a new string.
	 *@param currentSuffix The suffix to be replaced with <code>newSuffix</code>.
	 * @param newSuffix The suffix to replace <code>currentSuffix</code>.
	 * @return The transformed string.
	 * @throws IllegalArgumentException if word mismatch occur.
	 */
	public static String transform (
		String word,
		String currentSuffix,
		String newSuffix
	) {
		if(!word.endsWith(currentSuffix)) {
			String err = i18n.getError("BgWordformGenerator.unexpectedSuffix");
			throw new IllegalArgumentException(err);
		}
		
		return  word.substring(0, word.length() - currentSuffix.length()) + newSuffix;
	}
}
